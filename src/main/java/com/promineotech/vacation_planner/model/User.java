package com.promineotech.vacation_planner.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;

import java.util.Set;

// Lombok annotation to automatically generate getter, setter, equals, hash, and toString methods.
@Data

// JPA annotation to indicate this class is an entity to be managed by JPA/hibernate.
// It will be mapped to a table in your database.
@Entity
public class User {

    // @Id and @GeneratedValue are JPA annotations indicating the userId is the primary key and is generated by the DB.
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    // @NotBlank is a Jakarta validation annotation that verifies that the username is not null or just white space.
    // @Size is another Jakarta validation annotation that limits the size of the username to be between 5 and 20 characters.
    @NotBlank(message = "Username cannot be empty.")
    @Size(min = 5, max = 20, message = "Username must be between 5 and 20 characters.")
    private String username;

    // Similar validation annotations are applied to password and email. The password must have at least 8 characters.
    @NotBlank(message = "Password cannot be empty.")
    @Size(min = 8, message = "Password must contain at least eight characters.")
    private String password;

    // The @Email annotation ensures the email string corresponds to the email format.
    @NotBlank(message = "Email cannot be empty.")
    @Email(message = "Email should be valid.")
    private String email;

    // @OneToMany is a JPA annotation that indicates a one to many relationship between User and Itinerary.
    // The User can have many Itineraries. The mappedBy attribute indicates the field in the Itinerary entity that is used for this relationship.
    @OneToMany(mappedBy = "user")
    private Set<Itinerary> itineraries;
}